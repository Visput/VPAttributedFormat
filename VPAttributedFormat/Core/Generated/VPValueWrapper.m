//
// This file was generated by python script vp_value_wrapper_generator.py
// Don't edit it manually
//

#import "VPValueWrapper.h"

@interface VPIdValueWrapper ()

@property (nonatomic, assign) id value;

@end

@implementation VPIdValueWrapper

- (instancetype)initWithValue:(id)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPVoidPointerValueWrapper ()

@property (nonatomic, assign) void * value;

@end

@implementation VPVoidPointerValueWrapper

- (instancetype)initWithValue:(void *)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPCharValueWrapper ()

@property (nonatomic, assign) char value;

@end

@implementation VPCharValueWrapper

- (instancetype)initWithValue:(char)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPCharPointerValueWrapper ()

@property (nonatomic, assign) char * value;

@end

@implementation VPCharPointerValueWrapper

- (instancetype)initWithValue:(char *)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPSignedCharPointerValueWrapper ()

@property (nonatomic, assign) signed char * value;

@end

@implementation VPSignedCharPointerValueWrapper

- (instancetype)initWithValue:(signed char *)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPUnsignedCharValueWrapper ()

@property (nonatomic, assign) unsigned char value;

@end

@implementation VPUnsignedCharValueWrapper

- (instancetype)initWithValue:(unsigned char)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPUnicharValueWrapper ()

@property (nonatomic, assign) unichar value;

@end

@implementation VPUnicharValueWrapper

- (instancetype)initWithValue:(unichar)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPUnicharPointerValueWrapper ()

@property (nonatomic, assign) unichar * value;

@end

@implementation VPUnicharPointerValueWrapper

- (instancetype)initWithValue:(unichar *)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPShortValueWrapper ()

@property (nonatomic, assign) short value;

@end

@implementation VPShortValueWrapper

- (instancetype)initWithValue:(short)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPShortPointerValueWrapper ()

@property (nonatomic, assign) short * value;

@end

@implementation VPShortPointerValueWrapper

- (instancetype)initWithValue:(short *)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPUnsignedShortValueWrapper ()

@property (nonatomic, assign) unsigned short value;

@end

@implementation VPUnsignedShortValueWrapper

- (instancetype)initWithValue:(unsigned short)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPIntValueWrapper ()

@property (nonatomic, assign) int value;

@end

@implementation VPIntValueWrapper

- (instancetype)initWithValue:(int)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPIntPointerValueWrapper ()

@property (nonatomic, assign) int * value;

@end

@implementation VPIntPointerValueWrapper

- (instancetype)initWithValue:(int *)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPUnsignedIntValueWrapper ()

@property (nonatomic, assign) unsigned int value;

@end

@implementation VPUnsignedIntValueWrapper

- (instancetype)initWithValue:(unsigned int)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPWint_tValueWrapper ()

@property (nonatomic, assign) wint_t value;

@end

@implementation VPWint_tValueWrapper

- (instancetype)initWithValue:(wint_t)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPIntmax_tValueWrapper ()

@property (nonatomic, assign) intmax_t value;

@end

@implementation VPIntmax_tValueWrapper

- (instancetype)initWithValue:(intmax_t)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPIntmax_tPointerValueWrapper ()

@property (nonatomic, assign) intmax_t * value;

@end

@implementation VPIntmax_tPointerValueWrapper

- (instancetype)initWithValue:(intmax_t *)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPUintmax_tValueWrapper ()

@property (nonatomic, assign) uintmax_t value;

@end

@implementation VPUintmax_tValueWrapper

- (instancetype)initWithValue:(uintmax_t)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPSize_tValueWrapper ()

@property (nonatomic, assign) size_t value;

@end

@implementation VPSize_tValueWrapper

- (instancetype)initWithValue:(size_t)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPSize_tPointerValueWrapper ()

@property (nonatomic, assign) size_t * value;

@end

@implementation VPSize_tPointerValueWrapper

- (instancetype)initWithValue:(size_t *)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPPtrdiff_tValueWrapper ()

@property (nonatomic, assign) ptrdiff_t value;

@end

@implementation VPPtrdiff_tValueWrapper

- (instancetype)initWithValue:(ptrdiff_t)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPPtrdiff_tPointerValueWrapper ()

@property (nonatomic, assign) ptrdiff_t * value;

@end

@implementation VPPtrdiff_tPointerValueWrapper

- (instancetype)initWithValue:(ptrdiff_t *)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPLongValueWrapper ()

@property (nonatomic, assign) long value;

@end

@implementation VPLongValueWrapper

- (instancetype)initWithValue:(long)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPLongPointerValueWrapper ()

@property (nonatomic, assign) long * value;

@end

@implementation VPLongPointerValueWrapper

- (instancetype)initWithValue:(long *)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPUnsignedLongValueWrapper ()

@property (nonatomic, assign) unsigned long value;

@end

@implementation VPUnsignedLongValueWrapper

- (instancetype)initWithValue:(unsigned long)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPLongLongValueWrapper ()

@property (nonatomic, assign) long long value;

@end

@implementation VPLongLongValueWrapper

- (instancetype)initWithValue:(long long)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPLongLongPointerValueWrapper ()

@property (nonatomic, assign) long long * value;

@end

@implementation VPLongLongPointerValueWrapper

- (instancetype)initWithValue:(long long *)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPUnsignedLongLongValueWrapper ()

@property (nonatomic, assign) unsigned long long value;

@end

@implementation VPUnsignedLongLongValueWrapper

- (instancetype)initWithValue:(unsigned long long)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPDoubleValueWrapper ()

@property (nonatomic, assign) double value;

@end

@implementation VPDoubleValueWrapper

- (instancetype)initWithValue:(double)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


@interface VPLongDoubleValueWrapper ()

@property (nonatomic, assign) long double value;

@end

@implementation VPLongDoubleValueWrapper

- (instancetype)initWithValue:(long double)value {
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

@end


